public class Solution {

    public static int minCostPath(int input[][]) {
        /* Your class should be named Solution
		* Don't write main().
		* Don't read input, it is passed as function argument.
		* Return output and don't print it.
		* Taking input and printing output is handled automatically.
		*/
        int m=input.length;
        int n=input[0].length;
        int[][] dp=new int[m][n];
        
        dp[m-1][n-1]=input[m-1][n-1];
        for(int i=n-2;i>=0;i--)
        {
            dp[m-1][i]=dp[m-1][i+1]+input[m-1][i];
        }
        for(int j=m-2;j>=0;j--)
        {
            dp[j][n-1]=dp[j+1][n-1]+input[j][n-1];
        }
        for(int i=m-2;i>=0;i--)
        {
            for(int j=n-2;j>=0;j--){
                dp[i][j]=input[i][j]+Math.min(dp[i+1][j+1],Math.min(dp[i+1][j],dp[i][j+1]));
            }
        }
        return dp[0][0];
        
        // for(int i=0;i<m;i++)
        // {
        //     for (int j=0;j<n;j++)
        //     {
        //         storage[i][j]=-1;
        //     }
        // }
        // return minCostPathM(input,0,0,storage);
        // return minCostPath(input,0,0);
    }

    // public static int minCostPathM(int input[][],int i,int j,int storage[][]){       //memoization
    //     int m=input.length;
    //     int n=input[0].length;
    //     if(i==m-1 && j==n-1)
    //     {
    //         storage[i][j]=input[i][j];
    //         return storage[i][j];
    //     }
    //     if(i>=m ||j>=n)
    //     {
    //         return Integer.MAX_VALUE;
    //     }
    //     if(storage[i][j]!=-1)
    //     {
    //         return  storage[i][j];
    //     }
    //     int h=minCostPathM(input,i,j+1,storage);
    //     int v=minCostPathM(input,i+1,j,storage);
    //     int d=minCostPathM(input,i+1,j+1,storage);
    //     storage[i][j]=input[i][j]+Math.min(h,Math.min(v,d));
    //     return storage[i][j];
    // }
//     public static int minCostPath(int input[][],int i,int j) //recursion
//     {
//         if(i==input.length-1 && j==input[0].length-1){
//             return input[i][j];
//         }
//         if(i>input.length-1 || j>input[0].length-1){
//             return Integer.MAX_VALUE;
//         }


//         int h=minCostPath(input,i,j+1);
//         int v=minCostPath(input,i+1,j);
//         int d=minCostPath(input,i+1,j+1);
//         return input[i][j]+Math.min(h,Math.min(v,d));
//     }
}
