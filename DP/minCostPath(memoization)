public class Solution {

    public static int minCostPath(int input[][]) {
        /* Your class should be named Solution
		* Don't write main().
		* Don't read input, it is passed as function argument.
		* Return output and don't print it.
		* Taking input and printing output is handled automatically.
		*/
        int m=input.length;
        int n=input[0].length;
        int[][] storage=new int[m][n];
        for(int i=0;i<m;i++)
        {
            for (int j=0;j<n;j++)
            {
                storage[i][j]=-1;
            }
        }
        return minCostPathM(input,0,0,storage);
    }

    public static int minCostPathM(int input[][],int i,int j,int storage[][]){
        int m=input.length;
        int n=input[0].length;
        if(i==m-1 && j==n-1)
        {
            storage[i][j]=input[i][j];
            return storage[i][j];
        }
        if(i>=m ||j>=n)
        {
            return Integer.MAX_VALUE;
        }
        if(storage[i][j]!=-1)
        {
            return  storage[i][j];
        }
        int h=minCostPathM(input,i,j+1,storage);
        int v=minCostPathM(input,i+1,j,storage);
        int d=minCostPathM(input,i+1,j+1,storage);
        storage[i][j]=input[i][j]+Math.min(h,Math.min(v,d));
        return storage[i][j];
    }
}
