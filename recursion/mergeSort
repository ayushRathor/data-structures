public class solution {

	public static void mergeSort(int[] input){
        mergeSort(input,0,input.length-1);
	}
    public static void mergeSort(int[] input,int start,int end){
       
        if(start>=end)
        {
            return;
        }
         int mid= (start+end)/2;  //mid of array
        mergeSort(input,start,mid);  //first half mergesort
        mergeSort(input,mid+1,end);  //second half mergesort
        merge(input,start,mid,end);  //merge both the sorted halfs
       
    }
    public static void merge(int[] input,int start,int mid,int end){
        int[] temp=new int[end-start+1];   // create a temp array
        int i=start;   // crawlers for part 1
        int  j=mid+1;   // crawlers for part 2
        int k=0;        //  crawlers for temp
        while(i<=mid && j<=end)      // traverse both arrays and in each iteration add smaller of both elements in temp 
        {
            if(input[i]<=input[j])
            {
                temp[k++]=input[i++];
            }
            else
            {
                temp[k++]=input[j++];
            } 
        }
        while(i<=mid)   // add elements left in the first part 
        {
            temp[k++]=input[i++];
        }
        while(j<=end)   // add elements left in the second part
        {
            temp[k++]=input[j++];
        }
        for(i=start;i<=end;i++)   // copy temp to original array
        {
            input[i]=temp[i-start];
        }
    }
}
