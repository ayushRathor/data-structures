public class solution {

	// Return a string array that contains all the possible strings
	public static String[] keypad(int n){
        if(n<=1){                //base case
            String[] str={""};
            return  str;
        }
        String[] str=keypad(n/10);     //recursive call
        char[] helper=keyHelper(n%10);   //get keypad alphabet
        String[] res=new String[str.length * helper.length];  
        int k=0;  //crowling res array
            
        for(int i=0;i<str.length;i++){  //making combinations with the recursive result
            for(int j=0;j<helper.length;j++)  //and stor them in res array
            {
                res[k++]=str[i]+helper[j];
            }
        }
        return res;    
	}
    public static char[] keyHelper(int n)  //method to return alphabet corresponding 
    {                                       // to given  number
        String[] helperStrings={"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        char[] helper=helperStrings[n].toCharArray();
        return helper;
    }	
}
