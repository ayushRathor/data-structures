
import java.util.ArrayList;

class TrieNode {
	char data;
	boolean isTerminating;
	TrieNode children[];
	int childCount;
    boolean isPalin;

	public TrieNode(char data) {
		this.data = data;
		isTerminating = false;
		children = new TrieNode[26];
		childCount = 0;
        isPalin=false;
	}
}

public class Trie {

	private TrieNode root;
	public int count;

	public Trie() {
		root = new TrieNode('\0');
	}

	private void add(TrieNode root, String word){
		if(word.length() == 0){
			root.isTerminating = true;
			return;
		}		

		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];

		if(child == null) {
			child = new TrieNode(word.charAt(0));
            if(isPalindrom(word)){
                child.isPalin=true;
            }
			root.children[childIndex] = child;
			root.childCount++;
		}

		add(child, word.substring(1));
	}

	public void add(String word){
		add(root, word);
	}

	private boolean search(TrieNode root, String word) {
        // System.out.println(word);
		if(word.length() == 0 || root.isTerminating) {
			return true;
		}

		int childIndex=word.charAt(0) - 'a';
		TrieNode child=root.children[childIndex];
        
		if(child == null) {
            boolean out=false;
            if(root.isPalin)
            {
                out=true;
            }
             // System.out.println(root.data+"++++"+root.isPalin+"---"+word);
            // for(int i=0;i<root.children.length;i++)
            // {
            //     if(root.children[i]!=null)
            //     {
            //         System.out.println(root.children[i].data+"---"+root.children[i].isPalin);
            //     }
            //     if(root.children[i]!=null && root.children[i].isPalin)
            //     {
            //         out=true;
            //         break;
            //     }
            // }
			return out;
		}

		return search(child,word.substring(1));

	}

	public boolean search(String word) {
		return search(root,word);
	}

	private void print(TrieNode root, String word) {
		if (root == null) {
			return;
		}
		
		if (root.isTerminating) {
			System.out.println(word);
		}
		
		for (TrieNode child : root.children) {
			if (child == null) {
				continue;
			}
			String fwd = word + child.data;
			print(child, fwd);
		}
	}
	
	public void print() {
		print(this.root, "");
	}





	/*..................... Palindrome Pair................... */


	public boolean isPalindromePair(ArrayList<String> words) {
		//Your code goes here
        boolean result=false;
        for(int i=0;i<words.size();i++){
            add(reverse(words.get(i)));
        }
        for(int i=0;i<words.size();i++){
            if(search(words.get(i))){
                result=true;
            }
        }
        return result;
        
	}

     private String reverse(String s)
    {
        int l=0,r=s.length()-1;
        char[] temparray =s.toCharArray(); 
        while (l<r)
        {
            char temp=temparray[l];
            temparray[l]=temparray[r];
            temparray[r]=temp;
            l++;
            r--;
        }

        return new String(temparray);
    }
     private boolean isPalindrom(String word){
        // System.out.println(word);
        int i=0,j=word.length()-1;
        boolean check=true;
        while(i<j){
            if(word.charAt(i)!=word.charAt(j))
            {
                check=false;
                break;
            }   

            i++;j--;
        }
        return check;
    }
	
} 
