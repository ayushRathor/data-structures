
/*************
 * Following is the main function for your reference which we are using internally.

 public static void main(String[] args) {
		PriorityQueue pq = new PriorityQueue();
		int choice = s.nextInt();
		while(choice != -1) {
			switch(choice) {
				case 1 : // insert
					int element = s.nextInt();
					pq.insert(element);
					break;
				case 2 : // getMax
					System.out.println(pq.getMax());
					break;
				case 3 : // removeMax
					System.out.println(pq.removeMax());
					break;
				case 4 : // size
					System.out.println(pq.getSize());
					break;
				case 5 : // isEmpty
					System.out.println(pq.isEmpty());
				default :
						return;
			}
			choice = s.nextInt();
		}
	}
************/

import java.util.*;

public class PriorityQueue {
    // Complete this class
    private ArrayList<Integer> heap;
    PriorityQueue()
    {
        heap=new ArrayList();
    }

    public int getSize(){
        return heap.size();
    }	

    public boolean isEmpty(){
        return heap.size()==0;
    }

    public int getMax()
    {
       if(isEmpty())
        {
            return Integer.MIN_VALUE;
        }
        // System.out.println(heap);
        return heap.get(0);
    }

    public void insert(int el)
    {
        heap.add(el);
        int childIndex=heap.size()-1;
        int parentIndex=(childIndex-1)/2;
        while(childIndex>0){
            if(heap.get(parentIndex)<heap.get(childIndex))
            {
                int temp=heap.get(parentIndex);
                heap.set(parentIndex,heap.get(childIndex));
                heap.set(childIndex,temp);
                childIndex=parentIndex;
                parentIndex=(childIndex-1)/2;
            }
            else{
                break;
            }
            // System.out.println(heap);
        }
    }

    public int removeMax()
    {
        if(isEmpty())
        {
            return Integer.MIN_VALUE;
        }
        int removed=heap.get(0);
        heap.set(0,heap.get(heap.size()-1));
        heap.remove(heap.size()-1);
        int parentIndex=0;
        int leftChildIndex=1;
        int rightChildIndex=2;
        while(leftChildIndex<heap.size()-1 && rightChildIndex<heap.size()-1 )
        {
            if(heap.get(parentIndex)<heap.get(leftChildIndex)||heap.get(parentIndex)<heap.get(rightChildIndex)){
                int max=Math.max(heap.get(leftChildIndex), heap.get(rightChildIndex));
                int maxIndex=max==heap.get(leftChildIndex)?leftChildIndex:rightChildIndex;
                heap.set(maxIndex,heap.get(parentIndex));
                heap.set(parentIndex,max);
                parentIndex=maxIndex;
        		leftChildIndex=2*parentIndex+1;
        		rightChildIndex=2*parentIndex+2;
            }
            else {
                break;
            }
        }
        return removed;
    }
}
