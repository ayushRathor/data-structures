/***************
 * BinaryTreeNode class already given - 
 * 
class BinaryTreeNode<T> {
	T data;
	BinaryTreeNode<T> left;
	BinaryTreeNode<T> right;

	public BinaryTreeNode(T data) {
		this.data = data;
	}
}
***************/

/**************
 * Main function that we are using internally 
 * 
public static void main(String[] args) {
		BinarySearchTree bst = new BinarySearchTree();
		int choice, input;
		while(true) {
			choice = s.nextInt();
			switch(choice) {
				case 1 : 
					input = s.nextInt();
					bst.insertData(input);
					break;
				case 2 : 
					input = s.nextInt();
					bst.deleteData(input);
					break;
				case 3 : 
					input = s.nextInt();
					System.out.println(bst.search(input));
					break;
				default :
					bst.printTree();
					return;
			}

		}
*******************/

public class BinarySearchTree {
	// Complete this class
	private BinaryTreeNode<Integer> root; 
    
    private boolean searchHelper(BinaryTreeNode<Integer> root,int data){
        if(root==null)
        {
            return false;
        }
        if(root.data==data)
        {
            return true;
        }
        return searchHelper(root.left,data) || searchHelper(root.right,data);
    }
    public boolean search(int data)
    {
        return searchHelper(root,data);
    }
    
    private BinaryTreeNode<Integer> insertHelper(BinaryTreeNode<Integer> root,int data)
    {
        if(root==null)
        {
            BinaryTreeNode<Integer> newNode=new BinaryTreeNode<Integer>(data);
            return newNode;
        }
        if(root.data>data)
        {
            root.left=insertHelper(root.left,data);
        }
        else{
            root.right=insertHelper(root.right,data);
        }
        return root;
    }
    public void insertData(int data)
    {
        root=insertHelper(root,data);
    }
    
    private BinaryTreeNode<Integer> deleteHelper(BinaryTreeNode<Integer> root,int data)
    {
        if(root==null)
        {
            return null;
        }
        if(root.data>data)
        {
            root.left=deleteHelper(root.left,data);
            return root;
        }
        else if(root.data<data)
        {
            root.right=deleteHelper(root.right,data);
            return root;
        }
        else{
            if(root.left==null && root.right==null)
            {
                return null;
            }
            else if(root.left==null)
            {
                return root.right;
            }
            else if(root.right==null)
            {
                return root.left;
            }
            else{
                BinaryTreeNode<Integer> minNode=root.right;
                while(minNode.left!=null)
                {
                    minNode=minNode.left;
                }
                root.data=minNode.data;
                root.right=deleteHelper(root.right,minNode.data);
                return root;
            }
        }
        
    }
    public void deleteData( int data){
        root=deleteHelper(root,data);
    }
    public void printTree()
    {   
        printTree(root);
    }
    private void printTree(BinaryTreeNode<Integer> root){
         if(root==null)
        {
            return;
        }
        String ans=root.data+":";
        if(root.left!=null)
        {
            ans+="L:"+root.left.data+",";
        }
        if(root.right!=null)
        {
            ans+="R:"+root.right.data;
        }
        System.out.println(ans);
        printTree(root.left);
        printTree(root.right);
    }
    
}

