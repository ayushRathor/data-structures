public class Solution {

    /*	Binary Tree Node class
	 * 
	 * class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	 */

    public static BinaryTreeNode<Integer> getTreeFromPreorderAndInorder(int[] pre,
                                                                        int[] in){

        // Write your code here
        return getTreeFromPreorderAndInorder(pre,in,0,0,in.length-1);
    }
    public static BinaryTreeNode<Integer> getTreeFromPreorderAndInorder(int[] pre,
                                                                        int[] in,int preStart,int inStart,int inEnd){
        // Write your code here
        if(preStart>pre.length ||inStart>inEnd)
        {
            return null;
        }
        BinaryTreeNode<Integer> root=new BinaryTreeNode(pre[preStart]);
        int index=0;
        for(int i=inStart;i<=inEnd;i++)
        {
            if(pre[preStart]==in[i])
            {
                index=i;
                break;
            }
        }

        BinaryTreeNode<Integer> l=getTreeFromPreorderAndInorder(pre,in,preStart+1,inStart,index-1);
        BinaryTreeNode<Integer> r=getTreeFromPreorderAndInorder(pre,in,preStart+index-inStart+1,index+1,inEnd);
        root.left=l;
        root.right=r;
        return root;
    }

}
